// polybench-c-4.2 linear-algebra/kernels/mvt
#include <stdio.h>
const int N = 8000 - 1;

float A[8000][8000] = {};
float x1[8000] = {};
float x2[8000] = {};
float y_1[8000] = {};
float y_2[8000] = {};

void init() {
    int i = 0, j = 0;

    while (i <= N) {
        x1[i] = (i % N) * 1.0 / N;
        x2[i] = ((i + 1) % N) * 1.0 / N;
        y_1[i] = ((i + 3) % N) * 1.0 / N;
        y_2[i] = ((i + 4) % N) * 1.0 / N;

        j = 0;
        while (j <= N) {
            A[i][j] = (i * j % N) * 1.0 / N;
            j = j + 1;
        }
        i = i + 1;
    }
}

void kernel_mvt() {
    int i = 0, j = 0;

    i = 0;
    while (i <= N) {
        j = 0;
        while (j <= N) {
            x1[i] = x1[i] + A[i][j] * y_1[j];
            j = j + 1;
        }
        i = i + 1;
    }

    i = 0;
    while (i <= N) {
        j = 0;
        while (j <= N) {
            x2[i] = x2[i] + A[j][i] * y_2[j];
            j = j + 1;
        }
        i = i + 1;
    }
}

int main() {
    init();
    kernel_mvt();
    printf("%a",x1[0] + x2[0] + x1[1] + x2[1]);
    return 0;
}

