// polybench-c-4.2: datamining.correlation
const int N = 100;
const int M = 100;

float data[100][100] = {};
float corr[100][100] = {};
float mean[100] = {};
float stddev[100] = {};
float eps;
float float_n;

void init() {

    eps = 0.1;
    float_n = N;

    int i = 0;
    int j = 0;

    while (i < N) {
        j = 0;
        while (j < M) {
            data[i][j] = i * j / M + i;
            j = j + 1;
        }
        i = i + 1;
    }
}

float sqrt(float x) {
    float guess = 1.0;
    float epsilon = 0.0001;
    int max_iter = 20;
    int iter = 0;

    while (iter < max_iter) {
        guess = (guess + x / guess) / 2;
        if ((guess * guess - x) < epsilon) {
            break;
        }
        iter = iter + 1;
    }

    return guess;
}

void kernel_correlation() {
    int i, j, k;

    j = 0;
    while (j < M) {
        mean[j] = 0.0;
        i = 0;
        while (i < N) {
            mean[j] = mean[j] + data[i][j];
            i = i + 1;
        }
        mean[j] = mean[j] / float_n;
        j = j + 1;
    }

    // calculate standard deviation
    j = 0;
    while (j < M) {
        stddev[j] = 0.0;
        i = 0;
        while (i < N) {
            stddev[j] = stddev[j] + (data[i][j] - mean[j]) * (data[i][j] - mean[j]);
            i = i + 1;
        }
        stddev[j] = stddev[j] / float_n;
        stddev[j] = sqrt(stddev[j]);
        if (stddev[j] <= eps) {
            stddev[j] = 1.0; // avoid division by zero
        }
        j = j + 1;
    }

    i = 0;
    while (i < N) {
        j = 0;
        while (j < M) {
            data[i][j] = (data[i][j] - mean[j]) / (sqrt(float_n) * stddev[j]);
            j = j + 1;
        }
        i = i + 1;
    }

    i = 0;
    while (i < M - 1) {
        corr[i][i] = 1.0;
        j = i + 1;
        while (j < M) {
            corr[i][j] = 0.0;
            k = 0;
            while (k < N) {
                corr[i][j] = corr[i][j] + (data[k][i] * data[k][j]);
                k = k + 1;
            }
            corr[j][i] = corr[i][j];
            j = j + 1;
        }
        i = i + 1;
    }
    corr[M-1][M-1] = 1.0;
}

int main() {
    init();
    starttime();
    kernel_correlation();
    stoptime();
    putfloat(corr[0][0] + corr[0][1] + corr[0][2] + corr[0][3] + corr[0][4]);
    return 0; 
}
