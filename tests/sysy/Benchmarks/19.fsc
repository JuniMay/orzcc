// polybench-c-4.2 linear-algebra/kernels/3mm
#include <stdio.h>
const int NI = 800;
const int NJ = 900;
const int NK = 1000;
const int NL = 1100;
const int NM = 1200;

float A[800][1000] = {}; 
float B[1000][900] = {}; 
float C[900][1200] = {}; 
float D[1200][1100] = {}; 
float E[800][900] = {}; 
float F[900][1100] = {}; 
float G[800][1100] = {}; 

void init() {
    int i = 0;
    int j = 0;

    while (i < NI) {
        j = 0;
        while (j < NK) {
            A[i][j] = (i * j + 1) % NI / (5.0 * NI);
            j = j + 1;
        }
        i = i + 1;
    }

    i = 0;
    while (i < NK) {
        j = 0;
        while (j < NJ) {
            B[i][j] = (i * (j + 1) + 2) % NJ / (5.0 * NJ);
            j = j + 1;
        }
        i = i + 1;
    }

    i = 0;
    while (i < NJ) {
        j = 0;
        while (j < NM) {
            C[i][j] = (i * (j + 3)) % NL / (5.0 * NL);
            j = j + 1;
        }
        i = i + 1;
    }

    i = 0;
    while (i < NM) {
        j = 0;
        while (j < NL) {
            D[i][j] = (i * (j + 2) + 2) % NK / (5.0 * NK);
            j = j + 1;
        }
        i = i + 1;
    }
}

void kernel_3mm() {
    int i = 0;
    int j = 0;
    int k = 0;

    while (i < NI) {
        j = 0;
        while (j < NJ) {
            E[i][j] = 0.0;
            k = 0;
            while (k < NK) {
                E[i][j] = E[i][j] + A[i][k] * B[k][j];
                k = k + 1;
            }
            j = j + 1;
        }
        i = i + 1;
    }

    i = 0;
    while (i < NJ) {
        j = 0;
        while (j < NL) {
            F[i][j] = 0.0;
            k = 0;
            while (k < NM) {
                F[i][j] = F[i][j] + C[i][k] * D[k][j];
                k = k + 1;
            }
            j = j + 1;
        }
        i = i + 1;
    }

    i = 0;
    while (i < NI) {
        j = 0;
        while (j < NL) {
            G[i][j] = 0.0;
            k = 0;
            while (k < NJ) {
                G[i][j] = G[i][j] + E[i][k] * F[k][j];
                k = k + 1;
            }
            j = j + 1;
        }
        i = i + 1;
    }
}

int main() {
    init();      
    kernel_3mm();  
    printf("%a",G[0][0]+G[1][1]+G[2][2]+G[3][3]);
    return 0;
}
