// calculate pulangke kernel (普朗克常量相关计算) 
#include <stdio.h>
int n = 100;
int loop = 5;
float expmax = 20.0;
float u[100] = {}; 
float v[100] = {};
float y[100] = {}; 
float w[100] = {};
float x[100] = {};

void init() {
    int i = 0;
    while (i < n) {
        u[i] = 1.0 * i;
        v[i] = 2.0 * i; 
        x[i] = 3.0 * i;
        i = i + 1;
    }
}

float exp(float x) {
    float sum = 1.0; 
    float term = 1.0; 
    int i = 1;
    while (i <= 5) { // use 5 terms of Taylor series
        term = term * x / i;
        sum = sum + term;
        i = i + 1;
    }
    return sum;
}

float kernel() {
    u[n-1] = 0.99 * expmax * v[n-1];

    int l = 1;
    while (l <= loop) {
        int k = 0;
        while (k < n) {
            y[k] = u[k] / v[k];
            w[k] = x[k] / (exp(y[k]) - 1.0 + 0.000000001);
            k = k + 1;
        }
        l = l + 1;
    }

    return w[0]; 
}


int main() {
    init();  
    kernel();
    printf("%a", u[0]);
    return 0;
}
