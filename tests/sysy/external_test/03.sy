// a complex loop and condition case
const int n = 10;  
const int loop = 5; 
const int ng = 7;
const int nz = n;

float vy[ng][nz];
float vh[ng][nz];
float vf[ng][nz];
float vg[ng][nz];
float vs[ng][nz];

float ar, br, t, r, s;

float sqrt(float num) {
    if (num <= 0.0) {
        return 0.0;  
    }

    float x = num;
    float y = 1.0;
    float e = 0.00001;  // precision, 0.00001 is enough maybe?

    while ((x - y) > e) {
        x = (x + y) / 2.0;
        y = num / x;
    }

    return x;
}


void kernel() {
    int l = 1;
    while (l <= loop) {
        ar = 0.053;
        br = 0.073;

        int j = 1;
        while (j < ng) {
            int k = 1;
            while (k < nz) {
                if ((j+1) >= ng) {
                    vy[j][k] = 0.0;
                    k = k + 1;
                    continue;
                }
                if (vh[j+1][k] > vh[j][k]) {
                    t = ar;
                } else {
                    t = br;
                }

                if (vf[j][k] < vf[j][k-1]) {
                    if (vh[j][k-1] > vh[j+1][k-1])
                        r = vh[j][k-1];
                    else
                        r = vh[j+1][k-1];
                    s = vf[j][k-1];
                } else {
                    if (vh[j][k] > vh[j+1][k])
                        r = vh[j][k];
                    else
                        r = vh[j+1][k];
                    s = vf[j][k];
                }

                vy[j][k] = sqrt(vg[j][k]*vg[j][k] + r*r) * t / s;

                if ((k+1) >= nz) {
                    vs[j][k] = 0.0;
                    k = k + 1;
                    continue;
                }

                if (vf[j][k] < vf[j-1][k]) {
                    if (vg[j-1][k] > vg[j-1][k+1])
                        r = vg[j-1][k];
                    else
                        r = vg[j-1][k+1];
                    s = vf[j-1][k];
                    t = br;
                } else {
                    if (vg[j][k] > vg[j][k+1])
                        r = vg[j][k];
                    else
                        r = vg[j][k+1];
                    s = vf[j][k];
                    t = ar;
                }

                vs[j][k] = sqrt(vh[j][k]*vh[j][k] + r*r) * t / s;
                k = k + 1;
            }
            j = j + 1;
        }
        l = l + 1;
    }
}

int main() {
    int i = 0, j = 0;
    while (i < ng) {
        j = 0;
        while (j < nz) {
            vy[i][j] = 0.0;
            vh[i][j] = i * j;  
            vf[i][j] = i + j;  
            vg[i][j] = i * j + 1;  
            vs[i][j] = 0.0; 
            j = j + 1;
        }
        i = i + 1;
    }

    kernel();

    return 0;
}
