// polybench-c-4.2 linear-algebra/blas/syr2k
#include <stdio.h>
const int M = 1000;
const int N = 1200;

float C[N][N] = {};
float A[N][M] = {};
float B[N][M] = {};
float alpha;
float beta;

void init() {
    alpha = 1.5;
    beta = 1.2;

    int i = 0;
    int j = 0;

    while (i < N) {
        j = 0;
        while (j < M) {
            A[i][j] = (i * j + 1) % N / N;
            B[i][j] = (i * j + 2) % M / M;
            j = j + 1;
        }
        i = i + 1;
    }

    i = 0;
    while (i < N) {
        j = 0;
        while (j < N) {
            C[i][j] = (i * j + 3) % N / M;
            j = j + 1;
        }
        i = i + 1;
    }
}

void kernel_syr2k() {
    int i = 0;
    int j = 0;
    int k = 0;

    while (i < N) {
        j = 0;
        while (j <= i) {
            C[i][j] = C[i][j] * beta;
            j = j + 1;
        }

        k = 0;
        while (k < M) {
            j = 0;
            while (j <= i) {
                C[i][j] = C[i][j] + A[j][k] * alpha * B[i][k] + B[j][k] * alpha * A[i][k];
                j = j + 1;
            }
            k = k + 1;
        }
        i = i + 1;
    }
}

int main() {
    init();
    kernel_syr2k();
    printf("%a",C[0][0]+C[0][1]+C[0][2]+C[0][3]+C[0][4]+A[0][0]+B[0][0]);
    return 0;
}
