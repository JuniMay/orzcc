// polybench-c-4.2 linear-algebra/solvers/cholesky
#include <stdio.h>
const int N = 1000;

float A[1000][1000] = {};
float B[1000][1000] = {};
void init() {
    int i = 0, j = 0, r = 0, s = 0, t = 0;


    while (i < N) {
        j = 0;
        while (j <= i) {
            A[i][j] = (-j % N) / N + 1;
            j = j + 1;
        }
        while (j < N) {
            A[i][j] = 0;
            j = j + 1;
        }
        A[i][i] = 1;
        i = i + 1;
    }

    r = 0;
    while (r < N) {
        s = 0;
        while (s < N) {
            B[r][s] = 0;
            s = s + 1;
        }
        r = r + 1;
    }

    t = 0;
    while (t < N) {
        r = 0;
        while (r < N) {
            s = 0;
            while (s < N) {
                B[r][s] = B[r][s] + A[r][t] * A[s][t];
                s = s + 1;
            }
            r = r + 1;
        }
        t = t + 1;
    }

    r = 0;
    while (r < N) {
        s = 0;
        while (s < N) {
            A[r][s] = B[r][s];
            s = s + 1;
        }
        r = r + 1;
    }
}

float sqrt(float x) {
    float guess = 1.0;
    float epsilon = 0.0001;
    int max_iter = 20;
    int iter = 0;

    while (iter < max_iter) {
        guess = (guess + x / guess) / 2;
        if ((guess * guess - x) < epsilon) {
            break;
        }
        iter = iter + 1;
    }

    return guess;
}

void kernel_cholesky() {
    int i = 0, j = 0, k = 0;

    i = 0;
    while (i < N) {
        j = 0;
        while (j < i) {
            k = 0;
            while (k < j) {
                A[i][j] = A[i][j] - A[i][k] * A[j][k];
                k = k + 1;
            }
            A[i][j] = A[i][j] / A[j][j];
            j = j + 1;
        }
        k = 0;
        while (k < i) {
            A[i][i] = A[i][i] - A[i][k] * A[i][k];
            k = k + 1;
        }
        A[i][i] = sqrt(A[i][i]);
        i = i + 1;
    }
}

int main() {
    init();
    kernel_cholesky();
    printf("%a",A[0][0] + A[1][1] + A[2][2]);  
    return 0;
}
