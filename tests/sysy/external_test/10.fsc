// polybench-c-4.2: medley
#include <stdio.h>
const int N = 1000;

int seq[N] = {}; 
int table[N][N] = {}; 

void init() {
    int i = 0;
    int j = 0;

    while (i < N) {
        seq[i] = (i + 1) % 4;
        i = i + 1;
    }

    i = 0;
    while (i < N) {
        j = 0;
        while (j < N) {
            table[i][j] = 0;
            j = j + 1;
        }
        i = i + 1;
    }
}

int max_score(int s1, int s2) {
    if (s1 >= s2) {
        return s1;
    } else {
        return s2;
    }
}

int match(int b1, int b2) {
    if (b1 + b2 == 3) {
        return 1;
    } else {
        return 0;
    }
}

void kernel_nussinov() {
    int i, j, k;

    i = N - 1;
    while (i >= 0) {
        j = i + 1;
        while (j < N) {

            if (j - 1 >= 0) {
                table[i][j] = max_score(table[i][j], table[i][j - 1]);
            }
            if (i + 1 < N) {
                table[i][j] = max_score(table[i][j], table[i + 1][j]);
            }

            if (j - 1 >= 0 && i + 1 < N) {
                if (i < j - 1) {
                    table[i][j] = max_score(table[i][j], table[i + 1][j - 1] + match(seq[i], seq[j]));
                } else {
                    table[i][j] = max_score(table[i][j], table[i + 1][j - 1]);
                }
            }

            k = i + 1;
            while (k < j) {
                table[i][j] = max_score(table[i][j], table[i][k] + table[k + 1][j]);
                k = k + 1;
            }
            j = j + 1;
        }
        i = i - 1;
    }
}

int main() {
    init();
    kernel_nussinov();
    printf("%d",table[0][N - 1]);
    return 0;
}
