// polybench-c-4.2 linear-algebra/kernels/atax
const int M = 1900;
const int N = 2100;

float A[1900][2100] = {};
float x[2100] = {};
float y[2100] = {};
float tmp[1900] = {};

void init() {
    int i = 0;
    int j = 0;
    float fn = N;

    while (i < N) {
        x[i] = 1 + (i / fn);
        i = i + 1;
    }

    i = 0;
    while (i < M) {
        j = 0;
        while (j < N) {
            A[i][j] = (i + j) % N / (5.0 * M);
            j = j + 1;
        }
        i = i + 1;
    }
}

void kernel_atax() {
    int i = 0;
    int j = 0;

    i = 0;
    while (i < N) {
        y[i] = 0.0;
        i = i + 1;
    }

    i = 0;
    while (i < M) {
        tmp[i] = 0.0;
        j = 0;
        while (j < N) {
            tmp[i] = tmp[i] + A[i][j] * x[j];
            j = j + 1;
        }
        j = 0;
        while (j < N) {
            y[j] = y[j] + A[i][j] * tmp[i];
            j = j + 1;
        }
        i = i + 1;
    }
}

int main() {
    init();
    kernel_atax();
    putfloat(y[0]+y[1]+y[2]+y[3]);
    return 0;
}
