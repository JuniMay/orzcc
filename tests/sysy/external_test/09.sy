// polybench-c-4.2: medley.floyd-warshall
const int N = 10;

int path[100][100] = {}; 

void init() {
    int i = 0;
    int j = 0;

    // Initialize the path array
    while (i < N) {
        j = 0;
        while (j < N) {
            path[i][j] = i * j % 7 + 1;
            if ((i + j) % 13 == 0 || (i + j) % 7 == 0 || (i + j) % 11 == 0) {
                path[i][j] = 999;
            }
            j = j + 1;
        }
        i = i + 1;
    }
}

// Main computational kernel for Floyd-Warshall algorithm
void kernel_floyd_warshall() {
    int i, j, k;

    k = 0;
    while (k < N) {
        i = 0;
        while (i < N) {
            j = 0;
            while (j < N) {
                if (path[i][j] > path[i][k] + path[k][j]) {
                    path[i][j] = path[i][k] + path[k][j];
                }
                j = j + 1;
            }
            i = i + 1;
        }
        k = k + 1;
    }
}

int main() {
    init();  
    kernel_floyd_warshall(); 
    putint(path[0][0]);
    return 0;  
}
