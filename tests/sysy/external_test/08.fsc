// polybench-c-4.2: medley.deriche
#include <stdio.h>
const int W = 10;
const int H = 10;

float imgIn[100][100] = {}; 
float imgOut[100][100] = {}; 
float y1[100][100] = {}; 
float y2[100][100] = {}; 
float alpha;

void init() {
    // Initialize W and H with some default values

    alpha = 0.25; // Parameter of the filter

    int i = 0;
    int j = 0;

    // Initialize imgIn array
    while (i < W) {
        j = 0;
        while (j < H) {
            imgIn[i][j] = (313*i + 991*j % 65536) / 65535.0;
            j = j + 1;
        }
        i = i + 1;
    }
}

float exp(float x) {
    float sum = 1.0;
    float term = 1.0;
    int i = 1;
    while (i <= 10) { // Use 10 terms of Taylor series for approximation
        term = term * x / i;
        sum = sum + term;
        i = i + 1;
    }
    return sum;
}

void kernel_deriche() {
    int i, j;
    float xm1, tm1, ym1, ym2;
    float xp1, xp2;
    float tp1, tp2;
    float yp1, yp2;

    float k;
    float a1, a2, a3, a4, a5, a6, a7, a8;
    float b1, b2, c1, c2;

    k = (1.0 - exp(-alpha)) * (1.0 - exp(-alpha)) / (1.0 + 2.0 * alpha * exp(-alpha) - exp(2.0 * alpha));
    a1 = k;
    a5 = k;
    a2 = k * exp(-alpha) * (alpha - 1.0);
    a6 = k * exp(-alpha) * (alpha - 1.0);
    a3 = k * exp(-alpha) * (alpha + 1.0);
    a7 = k * exp(-alpha) * (alpha + 1.0);
    a4 = -k * exp(-2.0 * alpha);
    a8 = -k * exp(-2.0 * alpha);
    b1 = 2.0 / alpha;
    b2 = -exp(-2.0 * alpha);
    c1 = 1;
    c2 = 1;

    i = 0;
    while (i < W) {
        ym1 = 0.0;
        ym2 = 0.0;
        xm1 = 0.0;
        j = 0;
        while (j < H) {
            y1[i][j] = a1 * imgIn[i][j] + a2 * xm1 + b1 * ym1 + b2 * ym2;
            xm1 = imgIn[i][j];
            ym2 = ym1;
            ym1 = y1[i][j];
            j = j + 1;
        }
        i = i + 1;
    }

    i = 0;
    while (i < W) {
        yp1 = 0.0;
        yp2 = 0.0;
        xp1 = 0.0;
        xp2 = 0.0;
        j = H - 1;
        while (j >= 0) {
            y2[i][j] = a3 * xp1 + a4 * xp2 + b1 * yp1 + b2 * yp2;
            xp2 = xp1;
            xp1 = imgIn[i][j];
            yp2 = yp1;
            yp1 = y2[i][j];
            j = j - 1;
        }
        i = i + 1;
    }

    i = 0;
    while (i < W) {
        j = 0;
        while (j < H) {
            imgOut[i][j] = c1 * (y1[i][j] + y2[i][j]);
            j = j + 1;
        }
        i = i + 1;
    }

    j = 0;
    while (j < H) {
        tm1 = 0.0;
        ym1 = 0.0;
        ym2 = 0.0;
        i = 0;
        while (i < W) {
            y1[i][j] = a5 * imgOut[i][j] + a6 * tm1 + b1 * ym1 + b2 * ym2;
            tm1 = imgOut[i][j];
            ym2 = ym1;
            ym1 = y1[i][j];
            i = i + 1;
        }
        j = j + 1;
    }

    j = 0;
    while (j < H) {
        tp1 = 0.0;
        tp2 = 0.0;
        yp1 = 0.0;
        yp2 = 0.0;
        i = W - 1;
        while (i >= 0) {
            y2[i][j] = a7 * tp1 + a8 * tp2 + b1 * yp1 + b2 * yp2;
            tp2 = tp1;
            tp1 = imgOut[i][j];
            yp2 = yp1;
            yp1 = y2[i][j];
            i = i - 1;
        }
        j = j + 1;
    }

    i = 0;
    while (i < W) {
        j = 0;
        while (j < H) {
            imgOut[i][j] = c2 * (y1[i][j] + y2[i][j]);
            j = j + 1;
        }
        i = i + 1;
    }
}

int main() {
    init();       
    kernel_deriche(); 
    printf("%a",imgOut[0][0]);
    return 0;
}
