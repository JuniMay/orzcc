// a sample calculation of two dimensional explicit finite difference in fluid dynamics
#include <stdio.h>
const int n = 10;
const int loop = 5;
int nl1, nl2;
int kx, ky;
float u1[2][n+1][3], u2[2][n+1][3], u3[2][n+1][3];
float du1[n+1], du2[n+1], du3[n+1];
float a11, a12, a13, a21, a22, a23, a31, a32, a33, sig;

void init_arrays() {
    int i = 0, j = 0, k = 0;

    i = 0;
    while (i < 2) {
        j = 0;
        while (j <= n) {
            k = 0;
            while (k < 3) {
                u1[i][j][k] = 1.0;
                u2[i][j][k] = 2.0;
                u3[i][j][k] = 3.0;
                k = k + 1;
            }
            j = j + 1;
        }
        i = i + 1;
    }

    j = 0;
    while (j <= n) {
        du1[j] = 1.0;
        du2[j] = 2.0;
        du3[j] = 3.0;
        j = j + 1;
    }
}


void kernel_advection() {
    int l = 1;
    while (l <= loop) {
        nl1 = 0;
        nl2 = 1;
        kx = 1;
        while (kx < 3) {
            ky = 1;
            while (ky < n) {
                du1[ky] = u1[nl1][ky+1][kx] - u1[nl1][ky-1][kx];
                du2[ky] = u2[nl1][ky+1][kx] - u2[nl1][ky-1][kx];
                du3[ky] = u3[nl1][ky+1][kx] - u3[nl1][ky-1][kx];

                u1[nl2][ky][kx] =
                    u1[nl1][ky][kx] + a11 * du1[ky] + a12 * du2[ky] + a13 * du3[ky] + sig *
                    (u1[nl1][ky][kx+1] - 2 * u1[nl1][ky][kx] + u1[nl1][ky][kx-1]);

                u2[nl2][ky][kx] =
                    u2[nl1][ky][kx] + a21 * du1[ky] + a22 * du2[ky] + a23 * du3[ky] + sig *
                    (u2[nl1][ky][kx+1] - 2 * u2[nl1][ky][kx] + u2[nl1][ky][kx-1]);

                u3[nl2][ky][kx] =
                    u3[nl1][ky][kx] + a31 * du1[ky] + a32 * du2[ky] + a33 * du3[ky] + sig *
                    (u3[nl1][ky][kx+1] - 2 * u3[nl1][ky][kx] + u3[nl1][ky][kx-1]);

                ky = ky + 1;
            }
            kx = kx + 1;
        }
        l = l + 1;
    }
}

int main() {

    a11 = 1.0;
    a12 = 2.0;
    a13 = 3.0;
    a21 = 4.0;
    a22 = 5.0;
    a23 = 6.0;
    a31 = 7.0;
    a32 = 8.0;
    a33 = 9.0;
    sig = 0.1;
    init_arrays();
    kernel_advection();
    printf("%a", u1[1][1][1] + u2[1][1][1] + u3[1][1][1]);
    return 0;
}
