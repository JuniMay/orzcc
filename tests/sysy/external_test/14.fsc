// polybench-c-4.2 linear-algebra/blas/symm
#include <stdio.h>
const int M = 1000;
const int N = 1200;

float C[M][N] = {};
float A[M][M] = {};
float B[M][N] = {};
float alpha;
float beta;

void init() {
    alpha = 1.5;
    beta = 1.2;
    
    int i = 0;
    int j = 0;
    
    while (i < M) {
        j = 0;
        while (j < N) {
            C[i][j] = (i + j) % 100 * 1.0 / M;
            B[i][j] = (N + i - j) % 100 * 1.0 / M;
            j = j + 1;
        }
        i = i + 1;
    }

    i = 0;
    while (i < M) {
        j = 0;
        while (j <= i) {
            A[i][j] = (i + j) % 100 * 1.0 / M;
            j = j + 1;
        }
        i = i + 1;
    }
}

void kernel_symm() {
    int i = 0;
    int j = 0;
    int k = 0;
    float temp2;

    while (i < M) {
        j = 0;
        while (j < N) {
            temp2 = 0;
            k = 0;
            while (k < i) {
                C[k][j] = C[k][j] + alpha * B[i][j] * A[i][k];
                temp2 = temp2 + B[k][j] * A[i][k];
                k = k + 1;
            }
            C[i][j] = beta * C[i][j] + alpha * B[i][j] * A[i][i] + alpha * temp2;
            j = j + 1;
        }
        i = i + 1;
    }
}

int main() {
    init();
    kernel_symm();
    printf("%a",C[0][0]+C[0][1]+C[0][2]+C[0][3]+C[0][4]+1);
    return 0;
}
