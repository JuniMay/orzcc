global @a = i32 0x00000001
global @b = i32 0x00000002
global @hello0 = [i8; 6] [0x48, 0x65, 0x6c, 0x6c, 0x6f, 0x00]
global @hello1 = [i8; 6] [0x48, 0x65, 0x6c, 0x6c, 0x6f, 0x00]
global @hello2 = [i8; 6] [0x48, 0x65, 0x6c, 0x6c, 0x6f, 0x00]
global @hello3 = [i8; 6] [0x48, 0x65, 0x6c, 0x6c, 0x6f, 0x00]
global @hello4 = [i8; 6] [0x48, 0x65, 0x6c, 0x6c, 0x6f, 0x00]
global @hello5 = [i8; 6] [0x48, 0x65, 0x6c, 0x6c, 0x6f, 0x00]
global @world0 = [i8; 6] [0x57, 0x6f, 0x72, 0x6c, 0x64, 0x00]
global @world1 = [i8; 6] [0x57, 0x6f, 0x72, 0x6c, 0x64, 0x00]
global @world2 = [i8; 6] [0x57, 0x6f, 0x72, 0x6c, 0x64, 0x00]
global @world3 = [i8; 6] [0x57, 0x6f, 0x72, 0x6c, 0x64, 0x00]
global @world4 = [i8; 6] [0x57, 0x6f, 0x72, 0x6c, 0x64, 0x00]
global @world5 = [i8; 6] [0x57, 0x6f, 0x72, 0x6c, 0x64, 0x00]

decl @sub(i32, i32) -> i32

func @main() -> i32 {
^entry:
    %p = alloc [i8; 6]
    %tmp0 = getelemptr [i8; 6], ptr %p, i32 0
    store i8 0x48, ptr %tmp0
    %tmp1 = getelemptr [i8; 6], ptr %p, i32 1
    store i8 0x65, ptr %tmp1
    %tmp2 = getelemptr [i8; 6], ptr %p, i32 2
    store i8 0x6c, ptr %tmp2
    %tmp3 = getelemptr [i8; 6], ptr %p, i32 3
    store i8 0x6c, ptr %tmp3
    %tmp4 = getelemptr [i8; 6], ptr %p, i32 4
    store i8 0x6f, ptr %tmp4
    %tmp5 = getelemptr [i8; 6], ptr %p, i32 5
    store i8 0x00, ptr %tmp5

    %0 = add i32 0, i32 0xffffffff
    %1 = add %0, i32 1
    %2 = mul i32 3, %0
    %3 = icmp.eq %2, i32 0xfffffffd

    %a = load i32, ptr @a
    %b = load i32, ptr @b
    %result = call i32 @add(i32 %a, i32 %b)
    ret i32 %result
}

func @add(i32, i32) -> i32 {
^entry(i32 %0, i32 %1):
    %result = add i32 %0, i32 %1
    ret i32 %result
}